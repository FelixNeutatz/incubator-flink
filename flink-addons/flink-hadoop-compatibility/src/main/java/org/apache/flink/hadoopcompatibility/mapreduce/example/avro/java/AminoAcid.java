/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.apache.flink.hadoopcompatibility.mapreduce.example.avro.java;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AminoAcid extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AminoAcid\",\"namespace\":\"org.apache.flink.hadoopcompatibility.mapreduce.example.avro.java\",\"fields\":[{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"AminoAcidType\",\"symbols\":[\"ALIPHATIC\",\"HYDROXYL\",\"CYCLIC\",\"AROMATIC\",\"BASIC\",\"ACIDIC\"]}},{\"name\":\"fullName\",\"type\":\"string\"},{\"name\":\"abbreviation\",\"type\":\"string\"},{\"name\":\"molecularWeight\",\"type\":\"float\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public org.apache.flink.hadoopcompatibility.mapreduce.example.avro.java.AminoAcidType type;
  @Deprecated public CharSequence fullName;
  @Deprecated public CharSequence abbreviation;
  @Deprecated public float molecularWeight;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public AminoAcid() {}

  /**
   * All-args constructor.
   */
  public AminoAcid(org.apache.flink.hadoopcompatibility.mapreduce.example.avro.java.AminoAcidType type, CharSequence fullName, CharSequence abbreviation, Float molecularWeight) {
    this.type = type;
    this.fullName = fullName;
    this.abbreviation = abbreviation;
    this.molecularWeight = molecularWeight;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public Object get(int field$) {
    switch (field$) {
    case 0: return type;
    case 1: return fullName;
    case 2: return abbreviation;
    case 3: return molecularWeight;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: type = (org.apache.flink.hadoopcompatibility.mapreduce.example.avro.java.AminoAcidType)value$; break;
    case 1: fullName = (CharSequence)value$; break;
    case 2: abbreviation = (CharSequence)value$; break;
    case 3: molecularWeight = (Float)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'type' field.
   */
  public org.apache.flink.hadoopcompatibility.mapreduce.example.avro.java.AminoAcidType getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(org.apache.flink.hadoopcompatibility.mapreduce.example.avro.java.AminoAcidType value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'fullName' field.
   */
  public CharSequence getFullName() {
    return fullName;
  }

  /**
   * Sets the value of the 'fullName' field.
   * @param value the value to set.
   */
  public void setFullName(CharSequence value) {
    this.fullName = value;
  }

  /**
   * Gets the value of the 'abbreviation' field.
   */
  public CharSequence getAbbreviation() {
    return abbreviation;
  }

  /**
   * Sets the value of the 'abbreviation' field.
   * @param value the value to set.
   */
  public void setAbbreviation(CharSequence value) {
    this.abbreviation = value;
  }

  /**
   * Gets the value of the 'molecularWeight' field.
   */
  public Float getMolecularWeight() {
    return molecularWeight;
  }

  /**
   * Sets the value of the 'molecularWeight' field.
   * @param value the value to set.
   */
  public void setMolecularWeight(Float value) {
    this.molecularWeight = value;
  }

  /** Creates a new AminoAcid RecordBuilder */
  public static Builder newBuilder() {
    return new Builder();
  }
  
  /** Creates a new AminoAcid RecordBuilder by copying an existing Builder */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }
  
  /** Creates a new AminoAcid RecordBuilder by copying an existing AminoAcid instance */
  public static Builder newBuilder(AminoAcid other) {
    return new Builder(other);
  }
  
  /**
   * RecordBuilder for AminoAcid instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AminoAcid>
    implements org.apache.avro.data.RecordBuilder<AminoAcid> {

    private org.apache.flink.hadoopcompatibility.mapreduce.example.avro.java.AminoAcidType type;
    private CharSequence fullName;
    private CharSequence abbreviation;
    private float molecularWeight;

    /** Creates a new Builder */
    private Builder() {
      super(AminoAcid.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.fullName)) {
        this.fullName = data().deepCopy(fields()[1].schema(), other.fullName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.abbreviation)) {
        this.abbreviation = data().deepCopy(fields()[2].schema(), other.abbreviation);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.molecularWeight)) {
        this.molecularWeight = data().deepCopy(fields()[3].schema(), other.molecularWeight);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing AminoAcid instance */
    private Builder(AminoAcid other) {
            super(AminoAcid.SCHEMA$);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.fullName)) {
        this.fullName = data().deepCopy(fields()[1].schema(), other.fullName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.abbreviation)) {
        this.abbreviation = data().deepCopy(fields()[2].schema(), other.abbreviation);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.molecularWeight)) {
        this.molecularWeight = data().deepCopy(fields()[3].schema(), other.molecularWeight);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'type' field */
    public org.apache.flink.hadoopcompatibility.mapreduce.example.avro.java.AminoAcidType getType() {
      return type;
    }
    
    /** Sets the value of the 'type' field */
    public Builder setType(org.apache.flink.hadoopcompatibility.mapreduce.example.avro.java.AminoAcidType value) {
      validate(fields()[0], value);
      this.type = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'type' field has been set */
    public boolean hasType() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'type' field */
    public Builder clearType() {
      type = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'fullName' field */
    public CharSequence getFullName() {
      return fullName;
    }
    
    /** Sets the value of the 'fullName' field */
    public Builder setFullName(CharSequence value) {
      validate(fields()[1], value);
      this.fullName = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'fullName' field has been set */
    public boolean hasFullName() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'fullName' field */
    public Builder clearFullName() {
      fullName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'abbreviation' field */
    public CharSequence getAbbreviation() {
      return abbreviation;
    }
    
    /** Sets the value of the 'abbreviation' field */
    public Builder setAbbreviation(CharSequence value) {
      validate(fields()[2], value);
      this.abbreviation = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'abbreviation' field has been set */
    public boolean hasAbbreviation() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'abbreviation' field */
    public Builder clearAbbreviation() {
      abbreviation = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'molecularWeight' field */
    public Float getMolecularWeight() {
      return molecularWeight;
    }
    
    /** Sets the value of the 'molecularWeight' field */
    public Builder setMolecularWeight(float value) {
      validate(fields()[3], value);
      this.molecularWeight = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'molecularWeight' field has been set */
    public boolean hasMolecularWeight() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'molecularWeight' field */
    public Builder clearMolecularWeight() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public AminoAcid build() {
      try {
        AminoAcid record = new AminoAcid();
        record.type = fieldSetFlags()[0] ? this.type : (org.apache.flink.hadoopcompatibility.mapreduce.example.avro.java.AminoAcidType) defaultValue(fields()[0]);
        record.fullName = fieldSetFlags()[1] ? this.fullName : (CharSequence) defaultValue(fields()[1]);
        record.abbreviation = fieldSetFlags()[2] ? this.abbreviation : (CharSequence) defaultValue(fields()[2]);
        record.molecularWeight = fieldSetFlags()[3] ? this.molecularWeight : (Float) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
